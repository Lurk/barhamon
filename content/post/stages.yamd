---
title: "Stages"
date: 2025-03-22T11:00:00+01:00
image: https://res.cloudinary.com/barhamon/image/upload/v1742155451/header/stages.png
preview: "A tool for trippy animations"
tags:
- software
- js
- ts
---

At the beginning of the year, I had a chat with [12 min albums](https://12minalbums.bandcamp.com/) record label. Dante,
the guy from the label, said that if I record mini album (12 minutes) they would be glad to publish it. One of the
requirements from their side was that, together with audio, I needed to provide video. So, naturally, I spent the last
few months developing a tool to make trippy animations. Like this one:

{{iframe|/stages/?s=001N003.x_t6.0.00017.0.545411.1011.x4.zero5.width3.x_t3.x_t007.lfo_min6.0.74947.0.749686.0.7499007.lfo_max6.0.74994.0.754.0.75005.lfo_t1.211.40558.984546.100000013.lfo7.lfo_min7.lfo_max5.lfo_t4.zero011.y4.zero6.height3.lfo3.lfo025.first1.x1.y3.one1.v051.v1.05.width6.height6.height5.width}}

!! TLDR:
! lightbulb
The spacebar hides/shows controls. Click on animation makes it fullscreen.

While animation does work on mobile, controls are too big to be comfortable on mobile.

Open [the link](/stages/?s=001Y003.x_t6.0.00017.0.545411.1011.x4.zero5.width3.x_t3.x_t007.lfo_min6.0.74947.0.749686.0.7499007.lfo_max6.0.74994.0.754.0.75005.lfo_t1.211.40558.984546.100000013.lfo7.lfo_min7.lfo_max5.lfo_t4.zero011.y4.zero6.height3.lfo3.lfo025.first1.x1.y3.one1.v051.v1.05.width6.height6.height5.width)
and drag some sliders around.
!!

## Documentation.

Top left corner has 0,0 coordinates. X axis goes from left to right, Y axis goes from top to bottom.

There is two types of controls and factory to spawn them.

+ Value producers. Some of them are just values like [zero](#Built in value producers.) or
[one](#Built in value producers.). Some of them need other vales to produce values. For example, [math](#Math) needs
two other values to produce a value.
+ Outputs, are the ones that draw something on the screen. A [line](#Line) is an example of an output.

All changes are synced to the URL. That has two side effects:

+ Browser back/forth works like undo/redo
+ If you come up with a nice animation, you can embed it into anywhere just by URL.

!!
! meh
It does crush on division by zero or if connections form a loop. Browser back (undo) does fix the issue most of the
time.
!!

### Built in value producers.

- `zero`: 0
- `one`: 1
- `two`: 2
- `width`: width of the browser window
- `height`: height of the browser window
- `i` - In each frame, some amount of shapes will be drawn, this will be the serial number of the shape drawn.
- `now` - Time since animation start in milliseconds.

### Factory

The factory spawns any available control.

### Slider

Produces a value that can be changed by user in UI. Minimum slider resolution is `0.00001`, if `min` and `max` are
close enough to each other.

### Math

Produces a value that is a result of math operations.

- `sum` - adds two values
- `sub` - subtracts two values
- `mul` - multiplies two values
- `div` - divides two values
- `avg` - averages two values

In order to use screen real estate efficiently, [math](#Math) has two blocks `a` (top) and `b` (bottom). Each block has
`lhs` and `rhs` values and `mode` that specifies operation. Those two blocks produce two values with `_a` and `_b`
postfixes.

### Oscillator

Produces a value that oscillates between `min` and `max` in time specified by `raise` and `fall`.

All oscillators are synced to the same zero time.

`raise` and `fall` are in milliseconds.

### Random

Produces a random value between `min` and `max`

### Line output

Connects `vertices` amount of vertices by a straight line.

For each frame, it will read values from `vertices` and `sr` (sample rate) parameters. Then it will read values from
`x` and `y`, `vertices` amount of time, advancing `now` by `sr` and `i` by one.

### Logic

Produces a value that is a result of logic operation.

- `eq`: left hand equals right hand
- `neq`: left hand not equals right hand
- `gt`: left hand greater than right hand
- `lt`: left hand less than right hand
- `gte`: left hand greater than or equals right hand
- `lte`: left hand less than or equals right hand

If logic operation evaluates to true, value from `is_true` connector will be returned, otherwise value from `is_false`.

!! Writing documentation is hard.
! envelope
If you know how to make it better, please let me know.
!!

## Walkthrough A

In this part we will learn how to draw lines and position them on the screen.

### Simple line

Lets open [empty stage](/stages/), add a [slider](#Slider) with name `y` and [line](#Line) with name `line` to the stage.
Nothing happens, that because we do not have any connections yet. Lets connect:

- `line.x` to `width`
- `line.y` to `y`
- `line.vertices` to `height`
- `line.sr` to `one`

Now we have a line that goes from the left side of the screen to the right side of the screen. When you move the
`y` slider, the line will move up and down.

{{iframe|/stages/?s=001N001.y1.03.1003.500024.line1.i1.y3.one5.width}}

[simple line](/stages/?s=001Y001.y1.03.1003.500024.line1.i1.y3.one5.width)

### Vertical line that always in the center of the screen

In a previous example we were able to draw a line at position that can be adjusted manually. If we want to draw a line
at specific position let's, say at center of the screen, we need [math](#Math). With [math](#Math) we will divide
`height` value by `two`.

Lets open [empty stage](/stages/), add a [math](#Math) with name `center` and [line](#Line) with name `vl` to the
stage. Then add connections:

- `center.mode_a` to `div`
- `center.lhs_a` to `height`
- `center.rhs_a` to `two`
- `vl.x` to `width`
- `vl.y` to `center_a`
- `vl.vertices` to `width`
- `vl.sr` to `one`

{{iframe|/stages/?s=001N036.center3.div5.width3.two3.div6.height3.two022.lh1.i8.center_b3.one5.width}}

[vertical line in center](/stages/?s=001Y036.center3.div5.width3.two3.div6.height3.two022.lh1.i8.center_b3.one5.width)

### Horizontal line that always in the center of the screen

Let's add another line that will be drawn at the center of the screen. Use previous stage, add one more [line](#Line)
control with name `hl` and connect it like this:

- `center.mode_b` to `div`
- `center.lhs_b` to `width`
- `center.rhs_b` to `two`
- `hl.x` to `center_b`
- `hl.y` to `i`
- `hl.vertices` to `height`
- `hl.sr` to `one`

{{iframe|/stages/?s=001N036.center3.div5.width3.two3.div6.height3.two022.lh1.i8.center_b3.one5.width022.lv8.center_a1.i3.one6.height}}

[horizontal line in center](/stages/?s=001Y036.center3.div5.width3.two3.div6.height3.two022.lh1.i8.center_b3.one5.width022.lv8.center_a1.i3.one6.height)

### Triangle wave in the top right corner

With [oscillator](#Oscillator) control we can create a triangle wave. And to make it more interesting lets draw it in
the top left corner.

To achieve that we need to add three controls:

- [slider](#Slider) with name `y_t` to control the frequency
- [oscillator](#Oscillator) with name `y` to produce y value
- [line](#Line) with name `tr` to draw in top left corner

And connect them like this:

- `y.min` to `zero`
- `y.max` to `center_a`
- `y.raise` to `y_t`
- `y.fall` to `y_t`
- `tl.x` to `i`
- `tl.y` to `y`
- `tl.vertices` to `center_a`
- `tl.sr` to `one`

{{iframe|/stages/?s=001N036.center3.div5.width3.two3.div6.height3.two022.lh1.i8.center_b3.one5.width022.lv8.center_a1.i3.one6.height003.y_t1.03.5003.500011.y4.zero8.center_b3.y_t3.y_t022.tl1.i1.y3.one8.center_a}}

[top left corner](/stages/?s=001Y036.center3.div5.width3.two3.div6.height3.two022.lh1.i8.center_b3.one5.width022.lv8.center_a1.i3.one6.height003.y_t1.03.5003.500011.y4.zero8.center_b3.y_t3.y_t022.tl1.i1.y3.one8.center_a)

### Triangle wave in the bottom right corner

Let's add another triangle wave, but this time in the bottom right corner. To make it more interesting, we will make it
run in a different direction. To achieve that we need a bit more [math](#Math), and of course, another [line](#Line)
control.

Add following controls:

- [math](#Math) with name `br_pos` to calculate x value
- [line](#Line) with name `br` to draw in bottom right corner

Then connect them like this:

- `br_pos.mode_a` to `sub`
- `br_pos.lhs_a` to `width`
- `br_pos.rhs_a` to `i`
- `br.x` to `br_pos_a`
- `br.y` to `br_pos_b`
- `br.vertices` to `center_a`
- `br.sr` to `one`

{{iframe|/stages/?s=001N036.center3.div5.width3.two3.div6.height3.two022.lh1.i8.center_b3.one5.width022.lv8.center_a1.i3.one6.height003.y_t1.03.5003.500011.y4.zero8.center_b3.y_t3.y_t022.tl1.i1.y3.one8.center_a036.br_pos3.sub5.width1.i3.sum1.y8.center_b022.br8.br_pos_a8.br_pos_b3.one8.center_a}}

[bottom right corner](/stages/?s=001Y036.center3.div5.width3.two3.div6.height3.two022.lh1.i8.center_b3.one5.width022.lv8.center_a1.i3.one6.height003.y_t1.03.5003.500011.y4.zero8.center_b3.y_t3.y_t022.tl1.i1.y3.one8.center_a036.br_pos3.sub5.width1.i3.sum1.y8.center_b022.br8.br_pos_a8.br_pos_b3.one8.center_a)

### Movement in both directions

We have two corners left. Let's fill top right corner with graph that moves in both directions. To achieve that we need
to add following controls:

- [slider](#Slider) with name `x_t` to control frequency
- [oscillator](#Oscillator) with name `x`to produce x value
- [line](#Line) with name `tr` to draw in top right corner

And connect them like this:

- `x.min` to `center_a`
- `x.max` to `width`
- `x.raise` to `x_t`
- `x.fall` to `zero`
- `tr.x` to `x`
- `tr.y` to `y`
- `tr.vertices` to `width`
- `tr.sr` to `one`

{{iframe|/stages/?s=001N036.center3.div5.width3.two3.div6.height3.two022.lh1.i8.center_b3.one5.width022.lv8.center_a1.i3.one6.height003.y_t1.03.5003.500011.y4.zero8.center_b3.y_t3.y_t022.tl1.i1.y3.one8.center_a036.br_pos3.sub5.width1.i3.sum1.y8.center_b022.br8.br_pos_a8.br_pos_b3.one8.center_a003.x_t1.09.490.423393.500011.x8.center_a5.width3.x_t4.zero022.tr1.x1.y3.one5.width}}

[top right corner](/stages/?s=001Y036.center3.div5.width3.two3.div6.height3.two022.lh1.i8.center_b3.one5.width022.lv8.center_a1.i3.one6.height003.y_t1.03.5003.500011.y4.zero8.center_b3.y_t3.y_t022.tl1.i1.y3.one8.center_a036.br_pos3.sub5.width1.i3.sum1.y8.center_b022.br8.br_pos_a8.br_pos_b3.one8.center_a003.x_t1.09.490.423393.500011.x8.center_a5.width3.x_t4.zero022.tr1.x1.y3.one5.width)

### Distortion

Last corner to fill! You know what? We will get graph from previous step and distort it. To do that we will need a bit
more stuff than usual. Lets add following controls:

- [slider](#Slider) with name `n_amoint` to control amount of distortion
- [math](#Math) with name `n_width` to control width of the noise
- [random](#Random) with name `noise` to generate noise
- [math](#Math) with name `bl_pos` to calculate position
- [math](#Math) with name `bl_dis` to calculate distortion
- [line](#Line) with name `bl` to draw distorted graph

And connect them like this:

- `n_width.mode_a` to sub
- `n_width.lhs_a` to `zero`
- `n_width.rhs_a` to `n_amount`
- `noise.min` to `n_width_a`
- `noise.max` to `n_amount`
- `bl_pos.mode_a` to `sub`
- `bl_pos.lhs_a` to `x`
- `bl_pos.rhs_a` to `center_a`
- `bl_pos.mode_b` to `sum`
- `bl_pos.lhs_b` to `y`
- `bl_pos.rhs_b` to `center_b`
- `bl_dis.mode_a` to `sum`
- `bl_dis.lhs_a` to `bl_pos_a`
- `bl_dis.rhs_a` to `noise`
- `bl_dis.mode_b` to `sum`
- `bl_dis.lhs_b` to `bl_pos_b`
- `bl_dis.rhs_b` to `noise`
- `bl.x` to `bl_dis_a`
- `bl.y` to `bl_dis_b`
- `bl.vertices` to `width`
- `bl.sr` to `one`

{{iframe|/stages/?s=001N036.center3.div5.width3.two3.div6.height3.two022.lh1.i8.center_b3.one5.width022.lv8.center_a1.i3.one6.height003.y_t1.03.5003.500011.y4.zero8.center_b3.y_t3.y_t022.tl1.i1.y3.one8.center_a036.br_pos3.sub5.width1.i3.sum1.y8.center_b022.br8.br_pos_a8.br_pos_b3.one8.center_a003.x_t1.09.490.423393.500011.x8.center_a5.width3.x_t4.zero022.tr1.x1.y3.one8.center_a008.n_amount1.02.502.50037.n_width3.sub4.zero8.n_amount3.sum5.width5.width045.noise9.n_width_a8.n_amount036.bl_pos3.sub1.x8.center_a3.sum1.y8.center_b036.bl_dis3.sum8.bl_pos_a5.noise3.sum8.bl_pos_b5.noise022.bl8.bl_dis_a8.bl_dis_b3.one5.width}}

[bottom right corner](/stages/?s=001Y036.center3.div5.width3.two3.div6.height3.two022.lh1.i8.center_b3.one5.width022.lv8.center_a1.i3.one6.height003.y_t1.03.5003.500011.y4.zero8.center_b3.y_t3.y_t022.tl1.i1.y3.one8.center_a036.br_pos3.sub5.width1.i3.sum1.y8.center_b022.br8.br_pos_a8.br_pos_b3.one8.center_a003.x_t1.09.490.423393.500011.x8.center_a5.width3.x_t4.zero022.tr1.x1.y3.one8.center_a008.n_amount1.02.502.50037.n_width3.sub4.zero8.n_amount3.sum5.width5.width045.noise9.n_width_a8.n_amount036.bl_pos3.sub1.x8.center_a3.sum1.y8.center_b036.bl_dis3.sum8.bl_pos_a5.noise3.sum8.bl_pos_b5.noise022.bl8.bl_dis_a8.bl_dis_b3.one5.width)

!! Congrats!
! birthday cake
You just finished first ever Stages tutorial!

How was it?
!!

## Walktrough B

In this part we will recreate Stages logo.

### U shape

Lets start with a U shaped wave.

Open an [empty stage](/stages/) and add following controls:

- [slider](#Slider) with name `y_t` to control frequency of first oscillators
- [oscillator](#Oscillator) with name `y_min_mod` to modulate min value
- [oscillator](#Oscillator) with name `y` to get `y` coordinate
- [line](#Line) with name `line` to draw a line

Then connect them like this:

- `y_min_mod.min` to `zero`
- `y_min_mod.max` to `height`
- `y_min_mod.raise` to `y_t`
- `y_max_mod.fall` to `y_t`
- `y.min` to `y_min_mod`
- `y.max` to `height`
- `y.raise` to `y_t`
- `y.fall` to `y_t`
- `line.x` to `i`
- `line.y` to `y`
- `line.vertices` to `width`
- `line.sr` to `one`

{{iframe|/stages/?s=001N003.y_t1.03.5003.500019.y_min_mod4.zero6.height3.y_t3.y_t011.y9.y_min_mod6.height3.y_t3.y_t024.line1.i1.y3.one5.width}}

[U shape](/stages/?s=001Y003.y_t1.03.5003.500019.y_min_mod4.zero6.height3.y_t3.y_t011.y9.y_min_mod6.height3.y_t3.y_t024.line1.i1.y3.one5.width)

### Logo

To achieve the same result as on the logo we need one more [oscillator](#Oscillator) control that runs with a higher
frequency. Lets add to previous stage following controls:

- [oscillator](#Oscillator) with name `y_min_mm` to modulate `y_min_mod.min`
- [slider](#Slider) with name `mm_t` to control frequency of modulation

And connect them like that:

- `y_min_mm.min` to `zero`
- `y_min_mm.max` to `height`
- `y_min_mm.raise` to `mm_t`
- `y_min_mm.fall` to `mm_t`
- `y_min_mod.min` to `y_min_mm`

{{iframe|/stages/?s=001N003.y_t4.160010.1626.747314.2000019.y_min_mod8.y_min_mm6.height3.y_t3.y_t011.y9.y_min_mod6.height3.y_t3.y_t024.line1.i1.y3.one5.width018.y_min_mm4.zero6.height4.mm_t4.mm_t004.mm_t1.07.0.776551.1}}

[Stages logo](/stages/?s=001Y003.y_t4.160010.1626.747314.2000019.y_min_mod8.y_min_mm6.height3.y_t3.y_t011.y9.y_min_mod6.height3.y_t3.y_t024.line1.i1.y3.one5.width018.y_min_mm4.zero6.height4.mm_t4.mm_t004.mm_t1.07.0.776551.1)

!! Yay!
! image
The logo is complete, and no AI was harmed in the process.

What do you think?
!!

## Walktrough C

The idea was to introduce logic control, but I failed to find the time. Here is the final result:

### Pulsed distortion

{{iframe|/stages/?s=001N003.x_t1.01.51.5011.x4.zero5.width3.x_t3.x_t003.y_t1.07.2.001011.5011.y4.zero6.height3.y_t3.y_t024.line5.logic1.y3.one5.width007.r_width1.03.1003.100036.limits3.sub1.x7.r_width3.sum1.x7.r_width041.r8.limits_a8.limits_b055.logic3.lte7.r_width3.loo1.r1.x013.loo4.zero3.max4.time4.time004.time1.04.60004.6000003.max1.03.1503.150}}

[pulsed distortion](/stages/?s=001Y003.x_t1.01.51.5011.x4.zero5.width3.x_t3.x_t003.y_t1.07.2.001011.5011.y4.zero6.height3.y_t3.y_t024.line5.logic1.y3.one5.width007.r_width1.03.1003.100036.limits3.sub1.x7.r_width3.sum1.x7.r_width041.r8.limits_a8.limits_b055.logic3.lte7.r_width3.loo1.r1.x013.loo4.zero3.max4.time4.time004.time1.04.60004.6000003.max1.03.1503.150)

!! This post is too long anyway.
! github
I will stop here.

If you have any questions or suggestions, feel free to open an issue on the [Stages](https://github.com/Lurk/stages)
repo.
!!

## TODO

Plans for the future looks like that:

- Resolve circular dependencies.
- Resolve division by zero.
- Color control. Most likely in HSB format.
- More shapes. Circles, squares, etc.
- Trigonometry. cos, sin, tan, etc.
- Math control requires more options: powers, roots, logs, etc.
- Actual audio support.
- Gates and ADSR.
- MIDI support would be awesome.
- Better docs.
- Better UI.

!!
! smile
I am extremely curious what you will create with Stages. Send me links!
!!
